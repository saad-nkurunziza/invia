generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  WORKER
  ADMIN
}

enum MovementType {
  IN
  OUT
}

enum Currency {
  USD
  EUR
  GBP
  RWF
}

enum LogType {
  NEW_SUPPLIER
  NEW_PRODUCT
  NEW_PRODUCT_VERSION
  SUPPLIER_UPDATE
  PRODUCT_UPDATE
  PRODUCT_VERSION_UPDATE
  PRODUCT_DELETE
  PRODUCT_VERSION_DELETE
  SUPPLIER_DELETE
  STOCK_MOVEMENT
  USER_ACTION
}

enum ProductStatus {
  ACTIVE
  DISCONTINUED
  OUT_OF_STOCK
}

// Core business models
model Business {
  id                  String          @id @default(cuid())
  name                String
  registration_number String          @unique
  address             String?
  tel                 String?         @unique
  email               String?         @unique
  currency            Currency        @default(USD)
  workers             BusinessUser[]
  products            Product[]
  suppliers           Supplier[]
  logs                Log[]
  preferences         Preference[]
  analysis_stats      AnalysisStats[]
  transactions        StockMovement[]
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  deleted_at          DateTime?

  @@map("businesses")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String
  role          UserRole        @default(WORKER)
  emailVerified Boolean
  image         String?
  phone         String?
  accounts      Account[]
  transactions  StockMovement[]
  logs          Log[]
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  deleted_at    DateTime?
  businesses    BusinessUser[]
  sessions      Session[]

  @@unique([email])
  @@map("users")
}

model BusinessUser {
  user        User      @relation(fields: [user_id], references: [id])
  user_id     String
  business    Business  @relation(fields: [business_id], references: [id])
  business_id String
  join_date   DateTime  @default(now())
  last_access DateTime  @updatedAt
  deleted_at  DateTime?
  tasks       Task[]

  @@id([user_id, business_id])
  @@index([business_id])
  @@index([user_id])
  @@map("business_users")
}

model Product {
  id                 String           @id @default(cuid())
  name               String
  description        String?
  logs               Log[]
  transactions       StockMovement[]
  business           Business         @relation(fields: [business_id], references: [id])
  business_id        String
  current_version    ProductVersion?  @relation("CurrentVersion", fields: [current_version_id], references: [id])
  current_version_id String?          @unique
  versions           ProductVersion[]
  created_at         DateTime         @default(now())
  updated_at         DateTime         @updatedAt
  deleted_at         DateTime?
  supplier           Supplier?        @relation(fields: [supplier_id], references: [id])
  supplier_id        String?

  @@index([business_id])
  @@index([name])
  @@map("products")
}

model ProductVersion {
  id                  String        @id @default(cuid())
  product             Product       @relation(fields: [product_id], references: [id])
  product_id          String
  name                String
  stock               Int           @db.Integer
  description         String?
  buying_price        Int           @db.Integer
  selling_price       Int           @db.Integer
  status              ProductStatus @default(ACTIVE)
  threshold           Int           @db.Integer
  category            String?
  version_id          String
  supplier            Supplier?     @relation(fields: [supplier_id], references: [id])
  supplier_id         String?
  expiry_date         DateTime?
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
  current_for_product Product?      @relation("CurrentVersion")
  sku                 String?       @unique

  @@unique([product_id, version_id])
  @@index([product_id, created_at])
  @@map("product_versions")
}

model Supplier {
  id               String           @id @default(cuid())
  name             String
  address          String?
  tel              String
  email            String           @unique
  products         Product[]
  logs             Log[]
  business         Business         @relation(fields: [business_id], references: [id])
  business_id      String
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  deleted_at       DateTime?
  product_versions ProductVersion[]

  @@map("suppliers")
}

// Operational models
model StockMovement {
  id          String       @id @default(cuid())
  product     Product      @relation(fields: [product_id], references: [id])
  product_id  String
  quantity    Int
  type        MovementType
  user        User         @relation(fields: [user_id], references: [id])
  user_id     String
  business    Business     @relation(fields: [business_id], references: [id])
  business_id String
  created_at  DateTime     @default(now())

  @@map("stock_movements")
}

model Log {
  id          String    @id @default(cuid())
  type        LogType
  product     Product?  @relation(fields: [product_id], references: [id])
  product_id  String?
  supplier    Supplier? @relation(fields: [supplier_id], references: [id])
  supplier_id String?
  user        User?     @relation(fields: [user_id], references: [id])
  user_id     String?
  business    Business  @relation(fields: [business_id], references: [id])
  business_id String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@map("logistics")
}

// Configuration and analysis models
model Preference {
  id          String   @id @default(cuid())
  key         String
  value       String
  business    Business @relation(fields: [business_id], references: [id])
  business_id String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([key, business_id])
  @@map("preferences")
}

model AnalysisStats {
  id          String   @id @default(cuid())
  key         String
  value       Float
  business    Business @relation(fields: [business_id], references: [id])
  business_id String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([key, business_id, created_at])
  @@map("analysis_stats")
}

// Authentication models
model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("sessions")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("accounts")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verifications")
}

// Utility tables

model Task {
  id                      Int          @id @default(autoincrement())
  text                    String
  date                    DateTime
  category                String
  priority                String
  business_user           BusinessUser @relation(fields: [businessUserUser_id, businessUserBusiness_id], references: [user_id, business_id])
  businessUserUser_id     String
  businessUserBusiness_id String

  @@map("tasks")
}
